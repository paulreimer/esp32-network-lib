// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FIRMWAREUPDATE_FIRMWARE_H_
#define FLATBUFFERS_GENERATED_FIRMWAREUPDATE_FIRMWARE_H_

#include "flatbuffers/flatbuffers.h"

namespace Firmware {

struct FileMetadata;

struct FirmwareMetadata;

inline const flatbuffers::TypeTable *FileMetadataTypeTable();

inline const flatbuffers::TypeTable *FirmwareMetadataTypeTable();

struct FileMetadata FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return FileMetadataTypeTable();
  }
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "Firmware.FileMetadata";
  }
  enum {
    VT_PATH = 4,
    VT_CHECKSUM = 6,
    VT_URL = 8
  };
  const flatbuffers::String *path() const {
    return GetPointer<const flatbuffers::String *>(VT_PATH);
  }
  flatbuffers::String *mutable_path() {
    return GetPointer<flatbuffers::String *>(VT_PATH);
  }
  bool KeyCompareLessThan(const FileMetadata *o) const {
    return *path() < *o->path();
  }
  int KeyCompareWithValue(const char *val) const {
    return strcmp(path()->c_str(), val);
  }
  const flatbuffers::String *checksum() const {
    return GetPointer<const flatbuffers::String *>(VT_CHECKSUM);
  }
  flatbuffers::String *mutable_checksum() {
    return GetPointer<flatbuffers::String *>(VT_CHECKSUM);
  }
  const flatbuffers::String *url() const {
    return GetPointer<const flatbuffers::String *>(VT_URL);
  }
  flatbuffers::String *mutable_url() {
    return GetPointer<flatbuffers::String *>(VT_URL);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_PATH) &&
           verifier.VerifyString(path()) &&
           VerifyOffset(verifier, VT_CHECKSUM) &&
           verifier.VerifyString(checksum()) &&
           VerifyOffset(verifier, VT_URL) &&
           verifier.VerifyString(url()) &&
           verifier.EndTable();
  }
};

struct FileMetadataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_path(flatbuffers::Offset<flatbuffers::String> path) {
    fbb_.AddOffset(FileMetadata::VT_PATH, path);
  }
  void add_checksum(flatbuffers::Offset<flatbuffers::String> checksum) {
    fbb_.AddOffset(FileMetadata::VT_CHECKSUM, checksum);
  }
  void add_url(flatbuffers::Offset<flatbuffers::String> url) {
    fbb_.AddOffset(FileMetadata::VT_URL, url);
  }
  explicit FileMetadataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FileMetadataBuilder &operator=(const FileMetadataBuilder &);
  flatbuffers::Offset<FileMetadata> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FileMetadata>(end);
    fbb_.Required(o, FileMetadata::VT_PATH);
    return o;
  }
};

inline flatbuffers::Offset<FileMetadata> CreateFileMetadata(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> path = 0,
    flatbuffers::Offset<flatbuffers::String> checksum = 0,
    flatbuffers::Offset<flatbuffers::String> url = 0) {
  FileMetadataBuilder builder_(_fbb);
  builder_.add_url(url);
  builder_.add_checksum(checksum);
  builder_.add_path(path);
  return builder_.Finish();
}

inline flatbuffers::Offset<FileMetadata> CreateFileMetadataDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *path = nullptr,
    const char *checksum = nullptr,
    const char *url = nullptr) {
  return Firmware::CreateFileMetadata(
      _fbb,
      path ? _fbb.CreateString(path) : 0,
      checksum ? _fbb.CreateString(checksum) : 0,
      url ? _fbb.CreateString(url) : 0);
}

struct FirmwareMetadata FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return FirmwareMetadataTypeTable();
  }
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "Firmware.FirmwareMetadata";
  }
  enum {
    VT_VERSION = 4,
    VT_CHECKSUM = 6,
    VT_URL = 8,
    VT_INTERVAL = 10,
    VT_FILES = 12
  };
  uint32_t version() const {
    return GetField<uint32_t>(VT_VERSION, 0);
  }
  bool mutate_version(uint32_t _version) {
    return SetField<uint32_t>(VT_VERSION, _version, 0);
  }
  bool KeyCompareLessThan(const FirmwareMetadata *o) const {
    return version() < o->version();
  }
  int KeyCompareWithValue(uint32_t val) const {
    return static_cast<int>(version() > val) - static_cast<int>(version() < val);
  }
  const flatbuffers::String *checksum() const {
    return GetPointer<const flatbuffers::String *>(VT_CHECKSUM);
  }
  flatbuffers::String *mutable_checksum() {
    return GetPointer<flatbuffers::String *>(VT_CHECKSUM);
  }
  const flatbuffers::String *url() const {
    return GetPointer<const flatbuffers::String *>(VT_URL);
  }
  flatbuffers::String *mutable_url() {
    return GetPointer<flatbuffers::String *>(VT_URL);
  }
  uint32_t interval() const {
    return GetField<uint32_t>(VT_INTERVAL, 3600);
  }
  bool mutate_interval(uint32_t _interval) {
    return SetField<uint32_t>(VT_INTERVAL, _interval, 3600);
  }
  const flatbuffers::Vector<flatbuffers::Offset<FileMetadata>> *files() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<FileMetadata>> *>(VT_FILES);
  }
  flatbuffers::Vector<flatbuffers::Offset<FileMetadata>> *mutable_files() {
    return GetPointer<flatbuffers::Vector<flatbuffers::Offset<FileMetadata>> *>(VT_FILES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_VERSION) &&
           VerifyOffset(verifier, VT_CHECKSUM) &&
           verifier.VerifyString(checksum()) &&
           VerifyOffset(verifier, VT_URL) &&
           verifier.VerifyString(url()) &&
           VerifyField<uint32_t>(verifier, VT_INTERVAL) &&
           VerifyOffset(verifier, VT_FILES) &&
           verifier.VerifyVector(files()) &&
           verifier.VerifyVectorOfTables(files()) &&
           verifier.EndTable();
  }
};

struct FirmwareMetadataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_version(uint32_t version) {
    fbb_.AddElement<uint32_t>(FirmwareMetadata::VT_VERSION, version, 0);
  }
  void add_checksum(flatbuffers::Offset<flatbuffers::String> checksum) {
    fbb_.AddOffset(FirmwareMetadata::VT_CHECKSUM, checksum);
  }
  void add_url(flatbuffers::Offset<flatbuffers::String> url) {
    fbb_.AddOffset(FirmwareMetadata::VT_URL, url);
  }
  void add_interval(uint32_t interval) {
    fbb_.AddElement<uint32_t>(FirmwareMetadata::VT_INTERVAL, interval, 3600);
  }
  void add_files(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FileMetadata>>> files) {
    fbb_.AddOffset(FirmwareMetadata::VT_FILES, files);
  }
  explicit FirmwareMetadataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FirmwareMetadataBuilder &operator=(const FirmwareMetadataBuilder &);
  flatbuffers::Offset<FirmwareMetadata> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FirmwareMetadata>(end);
    return o;
  }
};

inline flatbuffers::Offset<FirmwareMetadata> CreateFirmwareMetadata(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t version = 0,
    flatbuffers::Offset<flatbuffers::String> checksum = 0,
    flatbuffers::Offset<flatbuffers::String> url = 0,
    uint32_t interval = 3600,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FileMetadata>>> files = 0) {
  FirmwareMetadataBuilder builder_(_fbb);
  builder_.add_files(files);
  builder_.add_interval(interval);
  builder_.add_url(url);
  builder_.add_checksum(checksum);
  builder_.add_version(version);
  return builder_.Finish();
}

inline flatbuffers::Offset<FirmwareMetadata> CreateFirmwareMetadataDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t version = 0,
    const char *checksum = nullptr,
    const char *url = nullptr,
    uint32_t interval = 3600,
    const std::vector<flatbuffers::Offset<FileMetadata>> *files = nullptr) {
  return Firmware::CreateFirmwareMetadata(
      _fbb,
      version,
      checksum ? _fbb.CreateString(checksum) : 0,
      url ? _fbb.CreateString(url) : 0,
      interval,
      files ? _fbb.CreateVector<flatbuffers::Offset<FileMetadata>>(*files) : 0);
}

inline const flatbuffers::TypeTable *FileMetadataTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 }
  };
  static const char * const names[] = {
    "path",
    "checksum",
    "url"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 3, type_codes, nullptr, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *FirmwareMetadataTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_UINT, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_UINT, 0, -1 },
    { flatbuffers::ET_SEQUENCE, 1, 0 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    FileMetadataTypeTable
  };
  static const char * const names[] = {
    "version",
    "checksum",
    "url",
    "interval",
    "files"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 5, type_codes, type_refs, nullptr, names
  };
  return &tt;
}

inline const Firmware::FirmwareMetadata *GetFirmwareMetadata(const void *buf) {
  return flatbuffers::GetRoot<Firmware::FirmwareMetadata>(buf);
}

inline const Firmware::FirmwareMetadata *GetSizePrefixedFirmwareMetadata(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Firmware::FirmwareMetadata>(buf);
}

inline FirmwareMetadata *GetMutableFirmwareMetadata(void *buf) {
  return flatbuffers::GetMutableRoot<FirmwareMetadata>(buf);
}

inline const char *FirmwareMetadataIdentifier() {
  return "FWUP";
}

inline bool FirmwareMetadataBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, FirmwareMetadataIdentifier());
}

inline bool VerifyFirmwareMetadataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Firmware::FirmwareMetadata>(FirmwareMetadataIdentifier());
}

inline bool VerifySizePrefixedFirmwareMetadataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Firmware::FirmwareMetadata>(FirmwareMetadataIdentifier());
}

inline const char *FirmwareMetadataExtension() {
  return "fb";
}

inline void FinishFirmwareMetadataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Firmware::FirmwareMetadata> root) {
  fbb.Finish(root, FirmwareMetadataIdentifier());
}

inline void FinishSizePrefixedFirmwareMetadataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Firmware::FirmwareMetadata> root) {
  fbb.FinishSizePrefixed(root, FirmwareMetadataIdentifier());
}

}  // namespace Firmware

#endif  // FLATBUFFERS_GENERATED_FIRMWAREUPDATE_FIRMWARE_H_
