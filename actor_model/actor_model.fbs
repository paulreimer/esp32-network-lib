/*
 * Copyright Paul Reimer, 2018
 *
 * This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 Unported License.
 * To view a copy of this license, visit
 * https://creativecommons.org/licenses/by-nc-sa/4.0/
 * or send a letter to
 * Creative Commons, 444 Castro Street, Suite 900, Mountain View, California, 94041, USA.
 */
include "uuid.fbs";

namespace ActorModel;

enum SupervisionStrategy:byte
{
  one_for_one,
  one_for_all,
  rest_for_one,
  simple_one_for_one,
}

enum ProcessFlag:short
{
  trap_exit
}

table Message
{
  type:string (required);
  timestamp:ulong;
  from_pid:UUID.UUID;
  payload_alignment:uint;
  payload:[ubyte];
}

enum EventTerminationAction:byte
{
  StopProcessing,
  ContinueProcessing,
}

table Ok
{
  id:UUID.UUID;
}

table Error
{
  reason:string (required);
}

table Unhandled
{
}

union Result { Ok, Error, Unhandled }

table Signal
{
  from_pid:UUID.UUID;
  reason:string;
}

table Function {
  name:string;
  address:uint64;
}

table Module {
  name:string;
  exports:[Function];
  path:string;
}

table MFA {
  module_name:string;
  function_name:string;
  args:[ubyte] (nested_flatbuffer: "Message");
}

table SupervisorFlags
{
  strategy:SupervisionStrategy = one_for_one;
  intensity:uint;
  period:uint;
}

enum ChildSpecRestartFlag : byte
{
  permanent,
  temporary,
  transient,
}

enum ChildSpecTypeFlag : byte {
  worker,
  supervisor,
}

table ChildSpec
{
  id:string (required);
  start:MFA (required);
  restart:ChildSpecRestartFlag = permanent;
  shutdown:uint = 5000;
  type:ChildSpecTypeFlag = worker;
  modules:[Module];
}

table SupervisorArgs
{
  child_specs:[ChildSpec];
}

table ProcessExecutionConfig
{
  task_prio:int = 5;
  task_stack_size:uint = 2560;
  mailbox_size:uint = 2048;
  send_timeout_microseconds:uint = 0xffffffff;
  receive_timeout_microseconds:uint = 0xffffffff;
  receive_lock_timeout_microseconds:uint = 0xffffffff;
}

root_type Message;

file_identifier "Act!";
