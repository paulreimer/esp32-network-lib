// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_UDPSERVER_UDPSERVER_H_
#define FLATBUFFERS_GENERATED_UDPSERVER_UDPSERVER_H_

#include "flatbuffers/flatbuffers.h"

#include "uuid_generated.h"

struct UDPServerConfiguration;

inline const flatbuffers::TypeTable *UDPServerConfigurationTypeTable();

struct UDPServerConfiguration FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return UDPServerConfigurationTypeTable();
  }
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "UDPServerConfiguration";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PORT = 4,
    VT_TO_PID = 6
  };
  uint16_t port() const {
    return GetField<uint16_t>(VT_PORT, 12345);
  }
  bool mutate_port(uint16_t _port) {
    return SetField<uint16_t>(VT_PORT, _port, 12345);
  }
  const UUID::UUID *to_pid() const {
    return GetStruct<const UUID::UUID *>(VT_TO_PID);
  }
  UUID::UUID *mutable_to_pid() {
    return GetStruct<UUID::UUID *>(VT_TO_PID);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, VT_PORT) &&
           VerifyField<UUID::UUID>(verifier, VT_TO_PID) &&
           verifier.EndTable();
  }
};

struct UDPServerConfigurationBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_port(uint16_t port) {
    fbb_.AddElement<uint16_t>(UDPServerConfiguration::VT_PORT, port, 12345);
  }
  void add_to_pid(const UUID::UUID *to_pid) {
    fbb_.AddStruct(UDPServerConfiguration::VT_TO_PID, to_pid);
  }
  explicit UDPServerConfigurationBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  UDPServerConfigurationBuilder &operator=(const UDPServerConfigurationBuilder &);
  flatbuffers::Offset<UDPServerConfiguration> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<UDPServerConfiguration>(end);
    return o;
  }
};

inline flatbuffers::Offset<UDPServerConfiguration> CreateUDPServerConfiguration(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint16_t port = 12345,
    const UUID::UUID *to_pid = 0) {
  UDPServerConfigurationBuilder builder_(_fbb);
  builder_.add_to_pid(to_pid);
  builder_.add_port(port);
  return builder_.Finish();
}

inline const flatbuffers::TypeTable *UDPServerConfigurationTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_USHORT, 0, -1 },
    { flatbuffers::ET_SEQUENCE, 0, 0 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    UUID::UUIDTypeTable
  };
  static const char * const names[] = {
    "port",
    "to_pid"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 2, type_codes, type_refs, nullptr, names
  };
  return &tt;
}

inline const UDPServerConfiguration *GetUDPServerConfiguration(const void *buf) {
  return flatbuffers::GetRoot<UDPServerConfiguration>(buf);
}

inline const UDPServerConfiguration *GetSizePrefixedUDPServerConfiguration(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<UDPServerConfiguration>(buf);
}

inline UDPServerConfiguration *GetMutableUDPServerConfiguration(void *buf) {
  return flatbuffers::GetMutableRoot<UDPServerConfiguration>(buf);
}

inline const char *UDPServerConfigurationIdentifier() {
  return "UDPS";
}

inline bool UDPServerConfigurationBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, UDPServerConfigurationIdentifier());
}

inline bool VerifyUDPServerConfigurationBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<UDPServerConfiguration>(UDPServerConfigurationIdentifier());
}

inline bool VerifySizePrefixedUDPServerConfigurationBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<UDPServerConfiguration>(UDPServerConfigurationIdentifier());
}

inline const char *UDPServerConfigurationExtension() {
  return "fb";
}

inline void FinishUDPServerConfigurationBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<UDPServerConfiguration> root) {
  fbb.Finish(root, UDPServerConfigurationIdentifier());
}

inline void FinishSizePrefixedUDPServerConfigurationBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<UDPServerConfiguration> root) {
  fbb.FinishSizePrefixed(root, UDPServerConfigurationIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_UDPSERVER_UDPSERVER_H_
